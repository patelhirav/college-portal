✅ React Frontend Folder Structure
Here’s a well-structured approach for your React app:

graphql
Copy
Edit
college-portal-frontend/
│── src/
│   │── components/        # Reusable UI components
│   │   │── ProtectedRoute.tsx  # Auth guard for protected pages
│   │── pages/             # Page components
│   │   │── Login.tsx      # Login Page
│   │   │── Signup.tsx     # Signup Page
│   │   │── Dashboard.tsx  # Dashboard Page
│   │── services/          # API calls
│   │   │── authService.ts # Auth API functions (login, signup)
│   │── hooks/             # Custom hooks (if needed)
│   │── context/           # Context API for auth state (optional)
│   │── utils/             # Utility functions
│   │── App.tsx            # Main App component
│   │── main.tsx           # React entry point
│── public/                # Static assets
│── package.json           # Dependencies
│── tsconfig.json          # TypeScript configuration
│── README.md              # Project documentation
✅ 1️⃣ Signup API Call in React
Create an API function to handle user signup.

📂 src/services/authService.ts

typescript
Copy
Edit
import axios from 'axios';

const API_URL = 'http://localhost:3000/auth';

export const signupUser = async (name: string, email: string, password: string, branch: string, year: number, enr_no: string) => {
  try {
    const response = await axios.post(${API_URL}/signup, {
      name,
      email,
      password,
      branch,
      year,
      enr_no,
    });
    return response.data; // This should return success message or JWT token
  } catch (error) {
    throw error.response ? error.response.data : error.message;
  }
};
✅ 2️⃣ Create Signup Page in React
Now, let's build the signup page for users.

📂 src/pages/Signup.tsx

tsx
Copy
Edit
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { signupUser } from '../services/authService';

const Signup: React.FC = () => {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [branch, setBranch] = useState('');
  const [year, setYear] = useState(1);
  const [enrNo, setEnrNo] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleSignup = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');

    try {
      await signupUser(name, email, password, branch, year, enrNo);
      alert('Signup successful! Please login.');
      navigate('/login'); // Redirect to login after signup
    } catch (err) {
      setError(err.message || 'Signup failed');
    }
  };

  return (
    <div className="container mt-5">
      <h2>Signup</h2>
      {error && <p className="text-danger">{error}</p>}
      <form onSubmit={handleSignup}>
        <div className="mb-3">
          <label>Name:</label>
          <input type="text" className="form-control" value={name} onChange={(e) => setName(e.target.value)} required />
        </div>
        <div className="mb-3">
          <label>Email:</label>
          <input type="email" className="form-control" value={email} onChange={(e) => setEmail(e.target.value)} required />
        </div>
        <div className="mb-3">
          <label>Password:</label>
          <input type="password" className="form-control" value={password} onChange={(e) => setPassword(e.target.value)} required />
        </div>
        <div className="mb-3">
          <label>Branch:</label>
          <input type="text" className="form-control" value={branch} onChange={(e) => setBranch(e.target.value)} required />
        </div>
        <div className="mb-3">
          <label>Year:</label>
          <input type="number" className="form-control" value={year} onChange={(e) => setYear(Number(e.target.value))} required />
        </div>
        <div className="mb-3">
          <label>Enrollment No:</label>
          <input type="text" className="form-control" value={enrNo} onChange={(e) => setEnrNo(e.target.value)} required />
        </div>
        <button type="submit" className="btn btn-primary">Signup</button>
      </form>
    </div>
  );
};

export default Signup;
✅ 3️⃣ Add Signup Route in React
Now, add the signup route in App.tsx.

📂 src/App.tsx

tsx
Copy
Edit
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import Login from './pages/Login';
import Signup from './pages/Signup';
import Dashboard from './pages/Dashboard';
import ProtectedRoute from './components/ProtectedRoute';

const App: React.FC = () => {
  return (
    <Router>
      <Routes>
        <Route path="/login" element={<Login />} />
        <Route path="/signup" element={<Signup />} />
        <Route element={<ProtectedRoute />}>
          <Route path="/dashboard" element={<Dashboard />} />
        </Route>
      </Routes>
    </Router>
  );
};

export default App;
✅ 4️⃣ Redirect to Login After Signup
After a successful signup, we redirect users to the login page. The navigate('/login') in the Signup.tsx page handles this.

🚀 Now Your Signup & Login Are Complete!
🎯 Next Step: Implement the Dashboard
Now that signup & login work, we should build the dashboard page.
The dashboard should fetch assignments and show them to users.
Admins should be able to create assignments.
Do you want me to start on the dashboard next? 🚀






You said:
I think we not make api for create admin that superadmin do write .?
ChatGPT said:
You're right! We need an API where the Super Admin can create Admins. Let's implement that now.

✅ Super Admin Creates Admin API
📌 Steps:
Super Admin can create Admins.
Admins have: Name, Email, Password, Branch.
Super Admin is created via seeding (already done).
Only the Super Admin can create Admins.
Hash password before saving.
📂 1️⃣ Create DTO for Admin Creation
Create a DTO to validate admin creation requests.

📂 src/admin/dto/create-admin.dto.ts

typescript
Copy
Edit
import { IsEmail, IsNotEmpty, MinLength } from 'class-validator';

export class CreateAdminDto {
  @IsNotEmpty()
  name: string;

  @IsEmail()
  email: string;

  @IsNotEmpty()
  @MinLength(6)
  password: string;

  @IsNotEmpty()
  branch: string;
}
📂 2️⃣ Admin Entity (Prisma Schema)
Make sure your Prisma schema includes an Admin model.

📂 prisma/schema.prisma

prisma
Copy
Edit
model Admin {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String
  branch   String
  role     String @default("admin")
}
Run Prisma migration:

bash
Copy
Edit
npx prisma migrate dev --name add_admin_table
📂 3️⃣ Create Admin Service
Implement logic to hash the password and save the Admin in the database.

📂 src/admin/admin.service.ts

typescript
Copy
Edit
import { Injectable, ForbiddenException } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import * as bcrypt from 'bcrypt';
import { CreateAdminDto } from './dto/create-admin.dto';

@Injectable()
export class AdminService {
  constructor(private prisma: PrismaService) {}

  async createAdmin(dto: CreateAdminDto, createdByRole: string) {
    if (createdByRole !== 'superadmin') {
      throw new ForbiddenException('Only Super Admin can create Admins');
    }

    const hashedPassword = await bcrypt.hash(dto.password, 10);

    return this.prisma.admin.create({
      data: {
        name: dto.name,
        email: dto.email,
        password: hashedPassword,
        branch: dto.branch,
      },
    });
  }
}
📂 4️⃣ Create Admin Controller
Define an API endpoint where the Super Admin can create Admins.

📂 src/admin/admin.controller.ts

typescript
Copy
Edit
import { Controller, Post, Body, UseGuards, Req } from '@nestjs/common';
import { AdminService } from './admin.service';
import { CreateAdminDto } from './dto/create-admin.dto';
import { JwtAuthGuard } from '../auth/jwt-auth.guard';
import { Roles } from '../auth/roles.decorator';
import { RoleGuard } from '../auth/roles.guard';

@Controller('admin')
export class AdminController {
  constructor(private readonly adminService: AdminService) {}

  @Post('create')
  @UseGuards(JwtAuthGuard, RoleGuard)
  @Roles('superadmin')
  async createAdmin(@Body() dto: CreateAdminDto, @Req() req) {
    return this.adminService.createAdmin(dto, req.user.role);
  }
}
📂 5️⃣ Update Admin Module
Import necessary services and controllers.

📂 src/admin/admin.module.ts

typescript
Copy
Edit
import { Module } from '@nestjs/common';
import { AdminService } from './admin.service';
import { AdminController } from './admin.controller';
import { PrismaService } from '../prisma/prisma.service';

@Module({
  controllers: [AdminController],
  providers: [AdminService, PrismaService],
})
export class AdminModule {}
📂 6️⃣ Register Admin Module in App Module
📂 src/app.module.ts

typescript
Copy
Edit
import { Module } from '@nestjs/common';
import { AdminModule } from './admin/admin.module';

@Module({
  imports: [AdminModule],
})
export class AppModule {}
✅ API Endpoint to Create Admin
Method	Endpoint	Description	Access
POST	/admin/create	Super Admin creates an Admin	Super Admin only
📌 Request Body
json
Copy
Edit
{
  "name": "John Doe",
  "email": "admin@example.com",
  "password": "admin123",
  "branch": "Computer Science"
}
🚀 Now Super Admin Can Create Admins!
Next Steps:
Want to test this in Swagger?
Shall we move to the Dashboard now? 🚀

2/2